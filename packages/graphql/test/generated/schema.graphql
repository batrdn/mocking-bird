directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | INTERFACE | OBJECT

input AddToCartInput {
  attributes: [CustomAttributeInput]
  cartId: ID!
  currency: CurrencyInput
  description: String
  id: ID!
  images: [String]
  metadata: Json
  name: String
  price: Int!
  quantity: Int = 1
  type: CartItemType = SKU
}

"""
Addresses are associated with Orders. They can either be shipping or billing addresses.
"""
type Address {
  """
  Use this to keep the city/town name.
  """
  city: String!

  """
  Use this to keep an optional company name for addresses.
  """
  company: String

  """
  Use this to keep the country name.
  """
  country: String!

  """
  Use this to keep the first line of the address.
  """
  line1: String!

  """
  Use this to keep the apartment, door number, etc.
  """
  line2: String

  """
  Use this to keep the name of the recipient.
  """
  name: String!

  """
  Use this to keep the post/postal/zip code.
  """
  postalCode: String!

  """
  Use this to keep the state/county name.
  """
  state: String
}

input AddressInput {
  city: String!
  company: String
  country: String!
  line1: String!
  line2: String
  name: String!
  postalCode: String!
  state: String
}

type Animal implements Being {
  birth: BeforeChristDate!
  id: ID!
  name: String!
  paysTaxes: Boolean!
  species: String
}

scalar BeforeChristDate

interface Being {
  birth: BeforeChristDate!
  id: ID!
  name: String!
  paysTaxes: Boolean!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

"""
Carts are the core concept of CartQL. Bring your own PIM and use CartQL to calculate your Cart and Checkout.
"""
type Cart implements Node {
  """
  A simple helper method to check if the cart hasn't been updated in the last 2 hours.
  """
  abandoned: Boolean

  """
  Custom key/value attributes array for the cart.
  """
  attributes: [CustomCartAttribute!]!

  """
  The date and time the cart was created.
  """
  createdAt: Date!

  """
  The current currency details of the cart.
  """
  currency: Currency!

  """
  The customer for the cart
  """
  email: String

  """
  The grand total for all items, including shipping, including the raw/formatted amounts and currency details.
  """
  grandTotal: Money!

  """
  A custom unique identifer for the cart provided by you.
  """
  id: ID!

  """
  A simple helper method to check if the cart is empty.
  """
  isEmpty: Boolean

  """
  The items currently in the cart.
  """
  items: [CartItem!]!

  """
  Custom meta object for the cart
  """
  metadata: Json

  """
  Any notes related to the cart/checkout
  """
  notes: String

  """
  The cart total for all items with type SHIPPING, including the raw/formatted amounts and currency details.
  """
  shippingTotal: Money!

  """
  Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details
  """
  subTotal: Money!

  """
  The cart total for all items with type TAX, including the raw/formatted amounts and currency details.
  """
  taxTotal: Money!

  """
  The number of total items in the cart
  """
  totalItems: Int

  """
  The number of total unique items in the cart.
  """
  totalUniqueItems: Int

  """
  The date and time the cart was updated.
  """
  updatedAt: Date!
}

"""
A Cart Item is used to store data on the items inside the Cart. There are no strict rules about what you use the named fields for.
"""
type CartItem {
  """
  Custom key/value attributes array for the item.
  """
  attributes: [CustomCartAttribute!]!

  """
  The date and time the item was created.
  """
  createdAt: Date!

  """
  Description for the item.
  """
  description: String

  """
  A custom unique identifer for the item provided by you.
  """
  id: ID!

  """
  Array of image URLs for the item.
  """
  images: [String]

  """
  Line total (quantity * unit price).
  """
  lineTotal: Money!

  """
  Custom metadata for the item.
  """
  metadata: Json

  """
  Name for the item.
  """
  name: String

  """
  Quantity for the item.
  """
  quantity: Int!

  """
  The type of cart item this is.
  """
  type: CartItemType!

  """
  Unit total for the individual item.
  """
  unitTotal: Money!

  """
  The date and time the item was updated.
  """
  updatedAt: Date!
}

"""
Use these enums to group cart items. Cart totals will reflect these enums.
"""
enum CartItemType {
  SHIPPING
  SKU
  TAX
}

input CheckoutInput {
  billing: AddressInput
  cartId: ID!
  email: String!
  metadata: Json
  notes: String
  shipping: AddressInput!
}

"""
Cart and Cart Items use the currency object to format their unit/line totals.
"""
type Currency {
  """
  The currency code, e.g. USD, GBP, EUR
  """
  code: CurrencyCode

  """
  The decimal places for the currency
  """
  decimalDigits: Int

  """
  The decimal separator, e.g. '.'
  """
  decimalSeparator: String

  """
  The currency smybol, e.g. $, £, €
  """
  symbol: String

  """
  The thousand separator, e.g. ',', '.'
  """
  thousandsSeparator: String
}

enum CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTC
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MTL
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDD
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEB
  VEF
  VND
  VUV
  WON
  WST
  XAF
  XBT
  XCD
  XOF
  XPF
  YER
  ZAR
  ZMW
}

input CurrencyInput {
  code: CurrencyCode
  decimalDigits: Int
  decimalSeparator: String
  symbol: String
  thousandsSeparator: String
}

type CustomAttribute {
  key: String!
  value: String
}

input CustomAttributeInput {
  key: String!
  value: String
}

"""
Custom Cart Attributes are used for any type of custom data you want to store on a Cart. These are transferred to Orders when you checkout.
"""
type CustomCartAttribute {
  key: String!
  value: String
}

"""
"""
scalar Date

input DeleteCartInput {
  """
  The ID of the Cart you wish to delete.
  """
  id: ID!
}

type DeletePayload {
  message: String
  success: Boolean!
}

input EmptyCartInput {
  """
  The ID of the Cart you wish to empty.
  """
  id: ID!
}

type Human implements Being {
  birth: BeforeChristDate!
  id: ID!
  name: String!
  occupation: String
  paysTaxes: Boolean!
}

"""
"""
scalar Json

"""
The Money type is used when describing the Cart and Cart Item unit/line totals.
"""
type Money {
  """
  The raw amount in cents/pence
  """
  amount: Int

  """
  The current currency details of the money amount
  """
  currency: Currency!

  """
  The formatted amount with the cart currency.
  """
  formatted: String!
}

union MortalBeing = Animal | Human

type Mutation {
  """
  Use this to add items to the cart. If the item already exists, the provided input will be merged and quantity will be increased.
  """
  addItem(input: AddToCartInput!): Cart!

  """
  Use this to convert a cart to an unpaid order.
  """
  checkout(input: CheckoutInput!): Order

  """
  Use this to decrease the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error.
  """
  decrementItemQuantity(input: UpdateItemQuantityInput!): Cart!

  """
  Use this to delete a cart. If the cart doesn't exist, it'll throw an error.
  """
  deleteCart(input: DeleteCartInput!): DeletePayload!

  """
  Use this to empty the cart. If the cart doesn't exist, it'll throw an error.
  """
  emptyCart(input: EmptyCartInput!): Cart!

  """
  Use this to increase the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error.
  """
  incrementItemQuantity(input: UpdateItemQuantityInput!): Cart!

  """
  Use this to remove any items from the cart. If it doesn't exist, it'll throw an error.
  """
  removeItem(input: RemoveCartItemInput!): Cart!

  """
  Use this to set all the items at once in the cart. This will override any existing items.
  """
  setItems(input: SetCartItemsInput!): Cart!

  """
  Use this to update the cart currency or metadata. If the cart doesn't exist, it'll throw an error.
  """
  updateCart(input: UpdateCartInput!): Cart!

  """
  Use this to update any existing items in the cart. If the item doesn't exist, it'll return an error.
  """
  updateItem(input: UpdateCartItemInput!): Cart!
}

interface Node {
  id: ID!
}

"""
Orders are immutable. Once created, you can't change them. The status will automatically reflect the current payment status.
"""
type Order {
  """
  The custom attributes set at checkout
  """
  attributes: [CustomAttribute!]!

  """
  The orders billing address.
  """
  billing: Address!

  """
  The ID of the cart you want to "checkout".
  """
  cartId: ID!

  """
  The date and time the order was created.
  """
  createdAt: Date!

  """
  The email of the recipient. Can be used later for cart recovery emails.
  """
  email: String!

  """
  The grand total for all items, including shipping, including the raw/formatted amounts and currency details.
  """
  grandTotal: Money!
  id: ID!

  """
  The order items that were in the cart.
  """
  items: [OrderItem!]!

  """
  The metadata set at checkout
  """
  metadata: Json

  """
  The notes set at checkout.
  """
  notes: String

  """
  The orders shipping address.
  """
  shipping: Address!

  """
  The total for all items with type SHIPPING, including the raw/formatted amounts and currency details.
  """
  shippingTotal: Money!

  """
  The current order status. This will reflect the current payment status. The first stage is 'unpaid'.
  """
  status: OrderStatus!

  """
  Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details
  """
  subTotal: Money!

  """
  The total for all items with type TAX, including the raw/formatted amounts and currency details.
  """
  taxTotal: Money!

  """
  The total item count.
  """
  totalItems: Int!

  """
  The total unique item count.
  """
  totalUniqueItems: Int!

  """
  The date and time the order status was updated.
  """
  updatedAt: Date!
}

"""
Orders contain items that were converted from the Cart at 'checkout'.

Order items are identical to the CartItem type.
"""
type OrderItem {
  attributes: [CustomCartAttribute!]!
  createdAt: Date!
  description: String
  id: ID!
  images: [String]
  lineTotal: Money!
  metadata: Json
  name: String
  quantity: Int!
  type: CartItemType!
  unitTotal: Money!
  updatedAt: Date!
}

enum OrderStatus {
  PAID
  UNPAID
}

type Query {
  """
  Use this to get a cart by a custom ID. If a cart doesn't exist with this ID, it will be created for you.
  """
  cart(currency: CurrencyInput, id: ID!): Cart
  mortalBeings: [MortalBeing!]!
  node(currency: CurrencyInput, id: ID!): Node
}

input RemoveCartItemInput {
  """
  The ID of the Cart in which the CartItem belongs to.
  """
  cartId: ID!

  """
  The ID of the CartItem you wish to remove.
  """
  id: ID!
}

input SetCartItemInput {
  attributes: [CustomAttributeInput]
  currency: CurrencyInput
  description: String
  id: ID!
  images: [String]
  metadata: Json
  name: String
  price: Int!
  quantity: Int = 1
  type: CartItemType = SKU
}

input SetCartItemsInput {
  cartId: ID!
  items: [SetCartItemInput!]!
}

input UpdateCartInput {
  attributes: [CustomAttributeInput]
  currency: CurrencyInput
  email: String
  id: ID!
  metadata: Json
  notes: String
}

input UpdateCartItemInput {
  cartId: ID!
  description: String
  id: ID!
  images: [String]
  metadata: Json
  name: String
  price: Int
  quantity: Int
  type: CartItemType
}

input UpdateItemQuantityInput {
  """
  The amount (as Int) you wish to increment the Cart item quantity by.
  """
  by: Int!

  """
  The ID of the Cart in which the CartItem belongs to.
  """
  cartId: ID!

  """
  The ID of the CartItem you wish to update.
  """
  id: ID!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload
